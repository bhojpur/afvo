// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AfvoServiceClient is the client API for AfvoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AfvoServiceClient interface {
	// StartLocalVafm starts a VAF Manager on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the afvo/config.yaml
	//   3. all bytes constituting the AFV Manager YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalVafm(ctx context.Context, opts ...grpc.CallOption) (AfvoService_StartLocalVafmClient, error)
	// StartFromPreviousVafm starts a new VAF Manager based on a previous one.
	// If the previous VAF Manager does not have the can-replay condition set this call will result in an error.
	StartFromPreviousVafm(ctx context.Context, in *StartFromPreviousVafmRequest, opts ...grpc.CallOption) (*StartVafmResponse, error)
	// StartVafmRequest starts a new VAF Manager based on its specification.
	StartVafm(ctx context.Context, in *StartVafmRequest, opts ...grpc.CallOption) (*StartVafmResponse, error)
	// Searches for VAF Manager(s) known to this instance
	ListVafms(ctx context.Context, in *ListVafmsRequest, opts ...grpc.CallOption) (*ListVafmsResponse, error)
	// Subscribe listens to new VAF Manager(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (AfvoService_SubscribeClient, error)
	// GetVafm retrieves details of a single VAF Manager
	GetVafm(ctx context.Context, in *GetVafmRequest, opts ...grpc.CallOption) (*GetVafmResponse, error)
	// Listen listens to VAF Manager updates and log output of a running VAF Manager
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (AfvoService_ListenClient, error)
	// StopVafm stops a currently running VAF Manager
	StopVafm(ctx context.Context, in *StopVafmRequest, opts ...grpc.CallOption) (*StopVafmResponse, error)
}

type afvoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAfvoServiceClient(cc grpc.ClientConnInterface) AfvoServiceClient {
	return &afvoServiceClient{cc}
}

func (c *afvoServiceClient) StartLocalVafm(ctx context.Context, opts ...grpc.CallOption) (AfvoService_StartLocalVafmClient, error) {
	stream, err := c.cc.NewStream(ctx, &AfvoService_ServiceDesc.Streams[0], "/v1.AfvoService/StartLocalVafm", opts...)
	if err != nil {
		return nil, err
	}
	x := &afvoServiceStartLocalVafmClient{stream}
	return x, nil
}

type AfvoService_StartLocalVafmClient interface {
	Send(*StartLocalVafmRequest) error
	CloseAndRecv() (*StartVafmResponse, error)
	grpc.ClientStream
}

type afvoServiceStartLocalVafmClient struct {
	grpc.ClientStream
}

func (x *afvoServiceStartLocalVafmClient) Send(m *StartLocalVafmRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *afvoServiceStartLocalVafmClient) CloseAndRecv() (*StartVafmResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartVafmResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *afvoServiceClient) StartFromPreviousVafm(ctx context.Context, in *StartFromPreviousVafmRequest, opts ...grpc.CallOption) (*StartVafmResponse, error) {
	out := new(StartVafmResponse)
	err := c.cc.Invoke(ctx, "/v1.AfvoService/StartFromPreviousVafm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *afvoServiceClient) StartVafm(ctx context.Context, in *StartVafmRequest, opts ...grpc.CallOption) (*StartVafmResponse, error) {
	out := new(StartVafmResponse)
	err := c.cc.Invoke(ctx, "/v1.AfvoService/StartVafm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *afvoServiceClient) ListVafms(ctx context.Context, in *ListVafmsRequest, opts ...grpc.CallOption) (*ListVafmsResponse, error) {
	out := new(ListVafmsResponse)
	err := c.cc.Invoke(ctx, "/v1.AfvoService/ListVafms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *afvoServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (AfvoService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AfvoService_ServiceDesc.Streams[1], "/v1.AfvoService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &afvoServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AfvoService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type afvoServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *afvoServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *afvoServiceClient) GetVafm(ctx context.Context, in *GetVafmRequest, opts ...grpc.CallOption) (*GetVafmResponse, error) {
	out := new(GetVafmResponse)
	err := c.cc.Invoke(ctx, "/v1.AfvoService/GetVafm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *afvoServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (AfvoService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &AfvoService_ServiceDesc.Streams[2], "/v1.AfvoService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &afvoServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AfvoService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type afvoServiceListenClient struct {
	grpc.ClientStream
}

func (x *afvoServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *afvoServiceClient) StopVafm(ctx context.Context, in *StopVafmRequest, opts ...grpc.CallOption) (*StopVafmResponse, error) {
	out := new(StopVafmResponse)
	err := c.cc.Invoke(ctx, "/v1.AfvoService/StopVafm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AfvoServiceServer is the server API for AfvoService service.
// All implementations must embed UnimplementedAfvoServiceServer
// for forward compatibility
type AfvoServiceServer interface {
	// StartLocalVafm starts a VAF Manager on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the afvo/config.yaml
	//   3. all bytes constituting the AFV Manager YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalVafm(AfvoService_StartLocalVafmServer) error
	// StartFromPreviousVafm starts a new VAF Manager based on a previous one.
	// If the previous VAF Manager does not have the can-replay condition set this call will result in an error.
	StartFromPreviousVafm(context.Context, *StartFromPreviousVafmRequest) (*StartVafmResponse, error)
	// StartVafmRequest starts a new VAF Manager based on its specification.
	StartVafm(context.Context, *StartVafmRequest) (*StartVafmResponse, error)
	// Searches for VAF Manager(s) known to this instance
	ListVafms(context.Context, *ListVafmsRequest) (*ListVafmsResponse, error)
	// Subscribe listens to new VAF Manager(s) updates
	Subscribe(*SubscribeRequest, AfvoService_SubscribeServer) error
	// GetVafm retrieves details of a single VAF Manager
	GetVafm(context.Context, *GetVafmRequest) (*GetVafmResponse, error)
	// Listen listens to VAF Manager updates and log output of a running VAF Manager
	Listen(*ListenRequest, AfvoService_ListenServer) error
	// StopVafm stops a currently running VAF Manager
	StopVafm(context.Context, *StopVafmRequest) (*StopVafmResponse, error)
	mustEmbedUnimplementedAfvoServiceServer()
}

// UnimplementedAfvoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAfvoServiceServer struct {
}

func (UnimplementedAfvoServiceServer) StartLocalVafm(AfvoService_StartLocalVafmServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalVafm not implemented")
}
func (UnimplementedAfvoServiceServer) StartFromPreviousVafm(context.Context, *StartFromPreviousVafmRequest) (*StartVafmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousVafm not implemented")
}
func (UnimplementedAfvoServiceServer) StartVafm(context.Context, *StartVafmRequest) (*StartVafmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVafm not implemented")
}
func (UnimplementedAfvoServiceServer) ListVafms(context.Context, *ListVafmsRequest) (*ListVafmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVafms not implemented")
}
func (UnimplementedAfvoServiceServer) Subscribe(*SubscribeRequest, AfvoService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAfvoServiceServer) GetVafm(context.Context, *GetVafmRequest) (*GetVafmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVafm not implemented")
}
func (UnimplementedAfvoServiceServer) Listen(*ListenRequest, AfvoService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedAfvoServiceServer) StopVafm(context.Context, *StopVafmRequest) (*StopVafmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVafm not implemented")
}
func (UnimplementedAfvoServiceServer) mustEmbedUnimplementedAfvoServiceServer() {}

// UnsafeAfvoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AfvoServiceServer will
// result in compilation errors.
type UnsafeAfvoServiceServer interface {
	mustEmbedUnimplementedAfvoServiceServer()
}

func RegisterAfvoServiceServer(s grpc.ServiceRegistrar, srv AfvoServiceServer) {
	s.RegisterService(&AfvoService_ServiceDesc, srv)
}

func _AfvoService_StartLocalVafm_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AfvoServiceServer).StartLocalVafm(&afvoServiceStartLocalVafmServer{stream})
}

type AfvoService_StartLocalVafmServer interface {
	SendAndClose(*StartVafmResponse) error
	Recv() (*StartLocalVafmRequest, error)
	grpc.ServerStream
}

type afvoServiceStartLocalVafmServer struct {
	grpc.ServerStream
}

func (x *afvoServiceStartLocalVafmServer) SendAndClose(m *StartVafmResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *afvoServiceStartLocalVafmServer) Recv() (*StartLocalVafmRequest, error) {
	m := new(StartLocalVafmRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AfvoService_StartFromPreviousVafm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousVafmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfvoServiceServer).StartFromPreviousVafm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AfvoService/StartFromPreviousVafm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfvoServiceServer).StartFromPreviousVafm(ctx, req.(*StartFromPreviousVafmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AfvoService_StartVafm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVafmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfvoServiceServer).StartVafm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AfvoService/StartVafm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfvoServiceServer).StartVafm(ctx, req.(*StartVafmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AfvoService_ListVafms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVafmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfvoServiceServer).ListVafms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AfvoService/ListVafms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfvoServiceServer).ListVafms(ctx, req.(*ListVafmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AfvoService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AfvoServiceServer).Subscribe(m, &afvoServiceSubscribeServer{stream})
}

type AfvoService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type afvoServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *afvoServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AfvoService_GetVafm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVafmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfvoServiceServer).GetVafm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AfvoService/GetVafm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfvoServiceServer).GetVafm(ctx, req.(*GetVafmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AfvoService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AfvoServiceServer).Listen(m, &afvoServiceListenServer{stream})
}

type AfvoService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type afvoServiceListenServer struct {
	grpc.ServerStream
}

func (x *afvoServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AfvoService_StopVafm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVafmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AfvoServiceServer).StopVafm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AfvoService/StopVafm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AfvoServiceServer).StopVafm(ctx, req.(*StopVafmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AfvoService_ServiceDesc is the grpc.ServiceDesc for AfvoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AfvoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AfvoService",
	HandlerType: (*AfvoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousVafm",
			Handler:    _AfvoService_StartFromPreviousVafm_Handler,
		},
		{
			MethodName: "StartVafm",
			Handler:    _AfvoService_StartVafm_Handler,
		},
		{
			MethodName: "ListVafms",
			Handler:    _AfvoService_ListVafms_Handler,
		},
		{
			MethodName: "GetVafm",
			Handler:    _AfvoService_GetVafm_Handler,
		},
		{
			MethodName: "StopVafm",
			Handler:    _AfvoService_StopVafm_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalVafm",
			Handler:       _AfvoService_StartLocalVafm_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _AfvoService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _AfvoService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "afvo.proto",
}
